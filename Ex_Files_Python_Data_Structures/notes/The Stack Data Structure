Stack: A data structure in which all insertions and deletions are made at one end, called the top of the stack.
LIFO data structure (Last In First Out - the last element to be added is the first to be removed)

Common Stack operations:
Push(item) : push item to the top of the stack
Pop(item) : removing an item from the top of the stack
Peek(item) : return the top item without removing it - When we want to see what's on the top of the stack but we don't want to remove it
Is_empty(item) : return true if the stack is empty

Even the we call it the top of the stack - depending on the implementation it may turn out to be the left hand side or the right hand side

Applications of the Stack (higher overview, small selection of things the stack offers - all told, the stack data structure provides many powerful applications):

Reverse Polish notation for evaluating arithmetic expressions
Syntax parsing
Cold stack: space for parameters and local variables is created

Used in recursion

Undo and redo operations in word processors

Low-level assembly programing


WRITE A STACK CLASS IN PYTHON:

Using a class to represent a stack for learning purposes...because the abstraction is helpful for getting a deep understanding of how the data structure works, including using the appropriate terms like 'push' and 'pop'.

In practical situations, we might just use a list

Another reason to use a class - if our code needs a stack and we provide a list, there's nothing to stop another programmer from calling insert, remove and other list functions that will affect the order of the stack...this fundamentally ruins the point of defining a stack as it no longer functions the way it should

The existing list methods make it very easy to use a list as a stack

**Remember LIFO

To add an item to the top of the stack we use: append()

To retrieve an item from the top of the stack we use: pop()

- The top of the stack is at the right hand end...so, addition and removal will happen from the right
**SEE dir 02_02_begin file stack.py

A stack lends itself naturally to problems where you need to reverse the order of something
**SEE dir 02_02_begin file reverse_string.py



